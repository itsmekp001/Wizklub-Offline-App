// Do not edit this file; automatically generated by build.py.
"use strict";

Blockly.Arduino = new Blockly.Generator("Arduino");
Blockly.Arduino.addReservedWords(
  "setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto,define,include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,true,false,interger, constants,floating,point,void,bookean,char,unsigned,byte,int,word,long,float,double,string,String,array,static, volatile,const,sizeof,pinMode,digitalWrite,digitalRead,analogReference,analogRead,analogWrite,tone,noTone,shiftOut,shitIn,pulseIn,millis,micros,delay,delayMicroseconds,min,max,abs,constrain,map,pow,sqrt,sin,cos,tan,randomSeed,random,lowByte,highByte,bitRead,bitWrite,bitSet,bitClear,bit,attachInterrupt,detachInterrupt,interrupts,noInterrupts"
);
Blockly.Arduino.ORDER_ATOMIC = 0;
Blockly.Arduino.ORDER_UNARY_POSTFIX = 1;
Blockly.Arduino.ORDER_UNARY_PREFIX = 2;
Blockly.Arduino.ORDER_MULTIPLICATIVE = 3;
Blockly.Arduino.ORDER_ADDITIVE = 4;
Blockly.Arduino.ORDER_SHIFT = 5;
Blockly.Arduino.ORDER_RELATIONAL = 6;
Blockly.Arduino.ORDER_EQUALITY = 7;
Blockly.Arduino.ORDER_BITWISE_AND = 8;
Blockly.Arduino.ORDER_BITWISE_XOR = 9;
Blockly.Arduino.ORDER_BITWISE_OR = 10;
Blockly.Arduino.ORDER_LOGICAL_AND = 11;
Blockly.Arduino.ORDER_LOGICAL_OR = 12;
Blockly.Arduino.ORDER_CONDITIONAL = 13;
Blockly.Arduino.ORDER_ASSIGNMENT = 14;
Blockly.Arduino.ORDER_NONE = 99;
function pinmap(a) {
  return [a, a];
}
var analog_pins = "A0 A1 A2 A3 A4 A5 A6 A7 DAC WKP".split(" ").map(pinmap),
  digital_pins = "D0 D1 D2 D3 D4 D5 D6 D7 RX TX"
    .split(" ")
    .map(pinmap)
    .concat(analog_pins),
  pwm_pins = "D0 D1 D2 D3 A4 A5 WKP RX TX".split(" ").map(pinmap),
  profile = {
    arduino: {
      description: "Arduino standard-compatible board",
      digital: digital_pins,
      analog: analog_pins,
      pwm: pwm_pins,
      serial: "115200",
    },
  };
profile["default"] = profile.arduino;
Blockly.Arduino.init = function (a) {
  Blockly.Arduino.definitions_ = Object.create(null);
  Blockly.Arduino.setups_ = Object.create(null);
  Blockly.Arduino.variableDB_
    ? Blockly.Arduino.variableDB_.reset()
    : (Blockly.Arduino.variableDB_ = new Blockly.Names(
        Blockly.Arduino.RESERVED_WORDS_
      ));
  var b = [];
  a = Blockly.Variables.allVariables(a);
  for (var c = 0; c < a.length; c++)
    b[c] =
      "int " +
      Blockly.Arduino.variableDB_.getName(a[c], Blockly.Variables.NAME_TYPE) +
      ";\n";
  Blockly.Arduino.definitions_.variables = b.join("\n");
};
Blockly.Arduino.finish = function (a) {
  a = "  " + a.replace(/\n/g, "\n  ");
  a = a.replace(/\n\s+$/, "\n");
  a = "void loop() \n{\n" + a + "\n}";
  var b = [],
    c = [],
    d;
  for (d in Blockly.Arduino.definitions_) {
    var e = Blockly.Arduino.definitions_[d];
    e.match(/^#include/) ? b.push(e) : c.push(e);
  }
  e = [];
  for (d in Blockly.Arduino.setups_) e.push(Blockly.Arduino.setups_[d]);
  return (
    (
      b.join("\n") +
      "\n\n" +
      c.join("\n") +
      "\nvoid setup() \n{\n  " +
      e.join("\n  ") +
      "\n}\n\n"
    )
      .replace(/\n\n+/g, "\n\n")
      .replace(/\n*$/, "\n\n\n") + a
  );
};
Blockly.Arduino.scrubNakedValue = function (a) {
  return a + ";\n";
};
Blockly.Arduino.quote_ = function (a) {
  a = a
    .replace(/\\/g, "\\\\")
    .replace(/\n/g, "\\\n")
    .replace(/\$/g, "\\$")
    .replace(/'/g, "\\'");
  return '"' + a + '"';
};
Blockly.Arduino.scrub_ = function (a, b) {
  if (null === b) return "";
  var c = "";
  if (!a.outputConnection || !a.outputConnection.targetConnection) {
    var d = a.getCommentText();
    d && (c += Blockly.Arduino.prefixLines(d, "// ") + "\n");
    for (var e = 0; e < a.inputList.length; e++)
      a.inputList[e].type == Blockly.INPUT_VALUE &&
        (d = a.inputList[e].connection.targetBlock()) &&
        (d = Blockly.Arduino.allNestedComments(d)) &&
        (c += Blockly.Arduino.prefixLines(d, "// "));
  }
  e = a.nextConnection && a.nextConnection.targetBlock();
  e = Blockly.Arduino.blockToCode(e);
  return c + b + e;
};
Blockly.Arduino.base = {};
Blockly.Arduino.base_delay = function () {
  return (
    "delay(" +
    (Blockly.Arduino.valueToCode(
      this,
      "DELAY_TIME",
      Blockly.Arduino.ORDER_ATOMIC
    ) || "1000") +
    ");\n"
  );
};
Blockly.Arduino.base_map = function () {
  var a = Blockly.Arduino.valueToCode(this, "NUM", Blockly.Arduino.ORDER_NONE),
    b = Blockly.Arduino.valueToCode(this, "DMAX", Blockly.Arduino.ORDER_ATOMIC);
  return ["map(" + a + ", 0, 1024, 0, " + b + ")", Blockly.Arduino.ORDER_NONE];
};
Blockly.Arduino.inout_digital_write = function () {
  var a = this.getFieldValue("PIN"),
    b = this.getFieldValue("STAT");
  Blockly.Arduino.setups_["setup_output_" + a] = "pinMode(" + a + ", OUTPUT);";
  return "digitalWrite(" + a + ", " + b + ");\n";
};
Blockly.Arduino.inout_digital_read = function () {
  var a = this.getFieldValue("PIN");
  Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
  return ["digitalRead(" + a + ")", Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.inout_analog_write = function () {
  var a = this.getFieldValue("PIN"),
    b = Blockly.Arduino.valueToCode(this, "NUM", Blockly.Arduino.ORDER_ATOMIC);
  Blockly.Arduino.setups_["setup_output_" + a] = "pinMode(" + a + ", OUTPUT);";
  return "analogWrite(" + a + ", " + b + ");\n";
};
Blockly.Arduino.inout_analog_read = function () {
  return [
    "analogRead(" + this.getFieldValue("PIN") + ")",
    Blockly.Arduino.ORDER_ATOMIC,
  ];
};
Blockly.Arduino.inout_tone = function () {
  var a = this.getFieldValue("PIN"),
    b = Blockly.Arduino.valueToCode(this, "NUM", Blockly.Arduino.ORDER_ATOMIC);
  Blockly.Arduino.setups_["setup_output" + a] = "pinMode(" + a + ", OUTPUT);";
  return "tone(" + a + ", " + b + ");\n";
};
Blockly.Arduino.inout_notone = function () {
  var a = this.getFieldValue("PIN");
  Blockly.Arduino.setups_["setup_output" + a] = "pinMode(" + a + ", OUTPUT);";
  return "noTone(" + a + ");\n";
};
Blockly.Arduino.inout_highlow = function () {
  return [
    "HIGH" == this.getFieldValue("BOOL") ? "HIGH" : "LOW",
    Blockly.Arduino.ORDER_ATOMIC,
  ];
};
Blockly.Arduino.servo_move = function () {
  var a = this.getFieldValue("PIN"),
    b = Blockly.Arduino.valueToCode(
      this,
      "DEGREE",
      Blockly.Arduino.ORDER_ATOMIC
    );
  Blockly.Arduino.definitions_["var_servo" + a] = "Servo servo_" + a + ";\n";
  Blockly.Arduino.setups_["setup_servo_" + a] =
    "servo_" + a + ".attach(" + a + ");\n";
  return "servo_" + a + ".write(" + b + ");\n";
};
Blockly.Arduino.servo_read_degrees = function () {
  var a = this.getFieldValue("PIN");
  Blockly.Arduino.definitions_["var_servo" + a] = "Servo servo_" + a + ";\n";
  Blockly.Arduino.setups_["setup_servo_" + a] =
    "servo_" + a + ".attach(" + a + ");\n";
  return "servo_" + a + ".read()";
};
Blockly.Arduino.serial_print = function () {
  var a =
    Blockly.Arduino.valueToCode(
      this,
      "CONTENT",
      Blockly.Arduino.ORDER_ATOMIC
    ) || "0";
  Blockly.Arduino.setups_["setup_serial_" + profile["default"].serial] =
    "Serial.begin(" + profile["default"].serial + ");\n";
  return "Serial.println(" + a + ");\n";
};
Blockly.Arduino.loops = {};
Blockly.Arduino.controls_for = function () {
  var a = Blockly.Arduino.variableDB_.getName(
      this.getFieldValue("VAR"),
      Blockly.Variables.NAME_TYPE
    ),
    b =
      Blockly.Arduino.valueToCode(
        this,
        "FROM",
        Blockly.Arduino.ORDER_ASSIGNMENT
      ) || "0",
    c =
      Blockly.Arduino.valueToCode(
        this,
        "TO",
        Blockly.Arduino.ORDER_ASSIGNMENT
      ) || "0",
    d = Blockly.Arduino.statementToCode(this, "DO");
  Blockly.Arduino.INFINITE_LOOP_TRAP &&
    (d =
      Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + this.id + "'") +
      d);
  if (b.match(/^-?\d+(\.\d+)?$/) && c.match(/^-?\d+(\.\d+)?$/))
    var e = parseFloat(b) <= parseFloat(c),
      d =
        "for (" +
        a +
        " = " +
        b +
        "; " +
        a +
        (e ? " <= " : " >= ") +
        c +
        "; " +
        a +
        (e ? "++" : "--") +
        ") {\n" +
        d +
        "}\n";
  else
    (d = ""),
      (e = b),
      b.match(/^\w+$/) ||
        b.match(/^-?\d+(\.\d+)?$/) ||
        ((e = Blockly.Arduino.variableDB_.getDistinctName(
          a + "_start",
          Blockly.Variables.NAME_TYPE
        )),
        (d += "int " + e + " = " + b + ";\n")),
      (b = c),
      c.match(/^\w+$/) ||
        c.match(/^-?\d+(\.\d+)?$/) ||
        ((b = Blockly.Arduino.variableDB_.getDistinctName(
          a + "_end",
          Blockly.Variables.NAME_TYPE
        )),
        (d += "int " + b + " = " + c + ";\n")),
      (d +=
        "for (" +
        a +
        " = " +
        e +
        ";\n    (" +
        e +
        " <= " +
        b +
        ") ? " +
        a +
        " <= " +
        b +
        " : " +
        a +
        " >= " +
        b +
        ";\n    " +
        a +
        " += (" +
        e +
        " <= " +
        b +
        ") ? 1 : -1) {\n" +
        branch0 +
        "}\n");
  return d;
};
Blockly.Arduino.controls_whileUntil = function () {
  var a = "UNTIL" == this.getFieldValue("MODE"),
    b =
      Blockly.Arduino.valueToCode(
        this,
        "BOOL",
        a ? Blockly.Arduino.ORDER_LOGICAL_NOT : Blockly.Arduino.ORDER_NONE
      ) || "false",
    c = Blockly.Arduino.statementToCode(this, "DO");
  Blockly.Arduino.INFINITE_LOOP_TRAP &&
    (c =
      Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + this.id + "'") +
      c);
  a && (b = "!" + b);
  return "while (" + b + ") {\n" + c + "}\n";
};
Blockly.Arduino.logic = {};
Blockly.Arduino.controls_if = function () {
  for (
    var a = 0,
      b =
        Blockly.Arduino.valueToCode(
          this,
          "IF" + a,
          Blockly.Arduino.ORDER_NONE
        ) || "false",
      c = Blockly.Arduino.statementToCode(this, "DO" + a),
      d = "if (" + b + ") {\n" + c + "\n}",
      a = 1;
    a <= this.elseifCount_;
    a++
  )
    (b =
      Blockly.Arduino.valueToCode(this, "IF" + a, Blockly.Arduino.ORDER_NONE) ||
      "false"),
      (c = Blockly.Arduino.statementToCode(this, "DO" + a)),
      (d += " else if (" + b + ") {\n" + c + "}");
  this.elseCount_ &&
    ((c = Blockly.Arduino.statementToCode(this, "ELSE")),
    (d += " else {\n" + c + "\n}"));
  return d + "\n";
};
Blockly.Arduino.logic_compare = function () {
  var a = this.getFieldValue("OP"),
    a = Blockly.Arduino.logic_compare.OPERATORS[a],
    b =
      "==" == a || "!=" == a
        ? Blockly.Arduino.ORDER_EQUALITY
        : Blockly.Arduino.ORDER_RELATIONAL,
    c = Blockly.Arduino.valueToCode(this, "A", b) || "0",
    d = Blockly.Arduino.valueToCode(this, "B", b) || "0";
  return [c + " " + a + " " + d, b];
};
Blockly.Arduino.logic_compare.OPERATORS = {
  EQ: "==",
  NEQ: "!=",
  LT: "<",
  LTE: "<=",
  GT: ">",
  GTE: ">=",
};
Blockly.Arduino.logic_operation = function () {
  var a = "AND" == this.getFieldValue("OP") ? "&&" : "||",
    b =
      "&&" == a
        ? Blockly.Arduino.ORDER_LOGICAL_AND
        : Blockly.Arduino.ORDER_LOGICAL_OR,
    c = Blockly.Arduino.valueToCode(this, "A", b) || "false",
    d = Blockly.Arduino.valueToCode(this, "B", b) || "false";
  return [c + " " + a + " " + d, b];
};
Blockly.Arduino.logic_negate = function () {
  var a = Blockly.Arduino.ORDER_UNARY_PREFIX;
  return ["!" + (Blockly.Arduino.valueToCode(this, "BOOL", a) || "false"), a];
};
Blockly.Arduino.logic_boolean = function () {
  return [
    "TRUE" == this.getFieldValue("BOOL") ? "true" : "false",
    Blockly.Arduino.ORDER_ATOMIC,
  ];
};
Blockly.Arduino.logic_null = function () {
  return ["NULL", Blockly.Arduino.ORDER_ATOMIC];
}; /*

 Visual Blocks Editor

 Copyright 2015 Nick Johnson.
 https://github.com/arachnidlabs/BlocklyDuino

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
Blockly.Arduino.machidobot = {};
var motor_pins = ["D0", "D1", "D2", "D3"],
  motor_dirs = {
    F: [
      ["D0", "HIGH"],
      ["D1", "LOW"],
      ["D2", "HIGH"],
      ["D3", "LOW"],
    ],
    B: [
      ["D0", "LOW"],
      ["D1", "HIGH"],
      ["D2", "LOW"],
      ["D3", "HIGH"],
    ],
    L: [
      ["D0", "HIGH"],
      ["D1", "LOW"],
      ["D2", "LOW"],
      ["D3", "HIGH"],
    ],
    R: [
      ["D0", "LOW"],
      ["D1", "HIGH"],
      ["D2", "HIGH"],
      ["D3", "LOW"],
    ],
    S: [
      ["D0", "LOW"],
      ["D1", "LOW"],
      ["D2", "LOW"],
      ["D3", "LOW"],
    ],
  };
Blockly.Arduino.machidobot_motors = function () {
  for (var a = this.getFieldValue("DIR"), b = 0; b < motor_pins.length; b++)
    Blockly.Arduino.setups_["setup_output_" + motor_pins[b]] =
      "pinMode(" + motor_pins[b] + ", OUTPUT);";
  for (var c = "", a = motor_dirs[a], b = 0; b < a.length; b++)
    c = c + "digitalWrite(" + a[b][0] + ", " + a[b][1] + ");\n";
  return c;
};
Blockly.Arduino.ultrasonic_ranger = function () {
  return [
    "ultrasonic_distance(" + this.getFieldValue("PIN") + ")",
    Blockly.Arduino.ORDER_ATOMIC,
  ];
};
Blockly.Arduino.particle_variable = function () {
  var a = this.getFieldValue("VAR");
  Blockly.Arduino.setups_["setup_particle_variable_" + a] =
    'Particle.variable("' + a + '", ' + a + ");";
  return "";
};
Blockly.Arduino.particle_function = function () {
  var a = Blockly.Arduino.variableDB_.getName(
    this.getFieldValue("NAME"),
    Blockly.Procedures.NAME_TYPE
  );
  Blockly.Arduino.setups_["setup_particle_function_" + a] =
    'Particle.function("' + a + '", ' + a + ");";
  var b = Blockly.Arduino.statementToCode(this, "STACK");
  Blockly.Arduino.INFINITE_LOOP_TRAP &&
    (b =
      Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + this.id + "'") +
      b);
  var c = Blockly.Arduino.variableDB_.getName(
      this.arguments_[0],
      Blockly.Variables.NAME_TYPE
    ),
    b = Blockly.Arduino.scrub_(
      this,
      "int " +
        a +
        "(String _" +
        c +
        ") {\n  int " +
        c +
        " = _" +
        c +
        ".toInt();\n" +
        b +
        "  return 0;\n}\n"
    );
  Blockly.Arduino.definitions_[a] = b;
  return null;
};
Blockly.Arduino.particle_publish = function () {
  return 'Particle.publish("' + this.getFieldValue("NAME") + '");\n';
};
Blockly.Arduino.particle_publish_arg = function () {
  var a = this.getFieldValue("NAME"),
    b = Blockly.Arduino.valueToCode(this, "ARG", Blockly.Arduino.ORDER_ATOMIC);
  return 'Particle.publish("' + a + '", String(' + b + "));\n";
};
Blockly.Arduino.math = {};
Blockly.Arduino.math_number = function () {
  var a = window.parseFloat(this.getFieldValue("NUM"));
  return [
    a,
    0 > a ? Blockly.Arduino.ORDER_UNARY_PREFIX : Blockly.Arduino.ORDER_ATOMIC,
  ];
};
Blockly.Arduino.math_arithmetic = function () {
  var a = this.getFieldValue("OP"),
    b = Blockly.Arduino.math_arithmetic.OPERATORS[a],
    a = b[0],
    b = b[1],
    c = Blockly.Arduino.valueToCode(this, "A", b) || "0",
    d = Blockly.Arduino.valueToCode(this, "B", b) || "0";
  return a
    ? [c + a + d, b]
    : ["Math.pow(" + c + ", " + d + ")", Blockly.Arduino.ORDER_UNARY_POSTFIX];
};
Blockly.Arduino.math_arithmetic.OPERATORS = {
  ADD: [" + ", Blockly.Arduino.ORDER_ADDITIVE],
  MINUS: [" - ", Blockly.Arduino.ORDER_ADDITIVE],
  MULTIPLY: [" * ", Blockly.Arduino.ORDER_MULTIPLICATIVE],
  DIVIDE: [" / ", Blockly.Arduino.ORDER_MULTIPLICATIVE],
  POWER: [null, Blockly.Arduino.ORDER_NONE],
};
Blockly.Arduino.procedures = {};
Blockly.Arduino.procedures_defreturn = function () {
  var a = Blockly.Arduino.variableDB_.getName(
      this.getFieldValue("NAME"),
      Blockly.Procedures.NAME_TYPE
    ),
    b = Blockly.Arduino.statementToCode(this, "STACK");
  Blockly.Arduino.INFINITE_LOOP_TRAP &&
    (b =
      Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + this.id + "'") +
      b);
  var c =
    Blockly.Arduino.valueToCode(this, "RETURN", Blockly.Arduino.ORDER_NONE) ||
    "";
  c && (c = "  return " + c + ";\n");
  for (
    var d = c ? "int" : "void", e = [], f = 0;
    f < this.arguments_.length;
    f++
  )
    e[f] =
      "int " +
      Blockly.Arduino.variableDB_.getName(
        this.arguments_[f],
        Blockly.Variables.NAME_TYPE
      );
  b = d + " " + a + "(" + e.join(", ") + ") {\n" + b + c + "}\n";
  b = Blockly.Arduino.scrub_(this, b);
  Blockly.Arduino.definitions_[a] = b;
  return null;
};
Blockly.Arduino.procedures_defnoreturn = Blockly.Arduino.procedures_defreturn;
Blockly.Arduino.procedures_callreturn = function () {
  for (
    var a = Blockly.Arduino.variableDB_.getName(
        this.getFieldValue("NAME"),
        Blockly.Procedures.NAME_TYPE
      ),
      b = [],
      c = 0;
    c < this.arguments_.length;
    c++
  )
    b[c] =
      Blockly.Arduino.valueToCode(
        this,
        "ARG" + c,
        Blockly.Arduino.ORDER_NONE
      ) || "null";
  return [a + "(" + b.join(", ") + ")", Blockly.Arduino.ORDER_UNARY_POSTFIX];
};
Blockly.Arduino.procedures_callnoreturn = function () {
  for (
    var a = Blockly.Arduino.variableDB_.getName(
        this.getFieldValue("NAME"),
        Blockly.Procedures.NAME_TYPE
      ),
      b = [],
      c = 0;
    c < this.arguments_.length;
    c++
  )
    b[c] =
      Blockly.Arduino.valueToCode(
        this,
        "ARG" + c,
        Blockly.Arduino.ORDER_NONE
      ) || "null";
  return a + "(" + b.join(", ") + ");\n";
};
Blockly.Arduino.procedures_ifreturn = function () {
  var a =
    "if (" +
    (Blockly.Arduino.valueToCode(
      this,
      "CONDITION",
      Blockly.Arduino.ORDER_NONE
    ) || "false") +
    ") {\n";
  if (this.hasReturnValue_)
    var b =
        Blockly.Arduino.valueToCode(
          this,
          "VALUE",
          Blockly.Arduino.ORDER_NONE
        ) || "null",
      a = a + ("  return " + b + ";\n");
  else a += "  return;\n";
  return a + "}\n";
};
Blockly.Arduino.texts = {};
Blockly.Arduino.text = function () {
  return [
    Blockly.Arduino.quote_(this.getFieldValue("TEXT")),
    Blockly.Arduino.ORDER_ATOMIC,
  ];
};
Blockly.Arduino.variables = {};
Blockly.Arduino.variables_get = function () {
  return [
    Blockly.Arduino.variableDB_.getName(
      this.getFieldValue("VAR"),
      Blockly.Variables.NAME_TYPE
    ),
    Blockly.Arduino.ORDER_ATOMIC,
  ];
};
Blockly.Arduino.variables_declare = function () {
  this.getFieldValue("TYPE");
  var a =
      Blockly.Arduino.valueToCode(
        this,
        "VALUE",
        Blockly.Arduino.ORDER_ASSIGNMENT
      ) || "0",
    b = Blockly.Arduino.variableDB_.getName(
      this.getFieldValue("VAR"),
      Blockly.Variables.NAME_TYPE
    );
  Blockly.Arduino.setups_["setup_var" + b] = b + " = " + a + ";\n";
  return "";
};
Blockly.Arduino.variables_set = function () {
  var a =
    Blockly.Arduino.valueToCode(
      this,
      "VALUE",
      Blockly.Arduino.ORDER_ASSIGNMENT
    ) || "0";
  return (
    Blockly.Arduino.variableDB_.getName(
      this.getFieldValue("VAR"),
      Blockly.Variables.NAME_TYPE
    ) +
    " = " +
    a +
    ";\n"
  );
};
